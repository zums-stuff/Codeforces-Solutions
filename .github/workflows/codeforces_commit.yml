name: Codeforces Auto-Commit
on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:

jobs:
  fetch-and-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
      
      - name: Pull latest changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull --rebase

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      # --- MODIFICACIÃ“N: AÃ±adimos cloudscraper ---
      - name: Install dependencies
        run: pip install requests cloudscraper
          
      - name: Create fetch_submissions.py
        env:
          CF_HANDLE: "zum" # Tu usuario de Codeforces
        run: |
          sed "s/HANDLE = .*/HANDLE = \"${CF_HANDLE}\"/" > fetch_submissions.py << 'EOF'
          import requests
          import cloudscraper # <-- Importamos la nueva librerÃ­a
          import json
          import os
          from datetime import datetime
          import time
          import html

          HANDLE = "placeholder"
          COUNT = 10
          SUBMISSION_API = f"https://codeforces.com/api/user.status?handle={HANDLE}&from=1&count={COUNT}"
          
          # Creamos una instancia del scraper que usaremos para todas las peticiones
          scraper = cloudscraper.create_scraper() 

          def fetch_with_retry(url, max_retries=3):
              for attempt in range(max_retries):
                  try:
                      # Usamos el scraper en lugar de requests
                      response = scraper.get(url)
                      response.raise_for_status()
                      data = response.json()
                      if data["status"] == "OK":
                          return data
                  except Exception as e:
                      print(f"API fetch attempt {attempt+1} failed: {e}")
                      if attempt == max_retries - 1:
                          raise
                      time.sleep(2 ** attempt)
          
          def load_submission_history():
              history_file = "submission_history.json"
              if os.path.exists(history_file):
                  with open(history_file, "r") as f:
                      return json.load(f)
              return []
          
          def save_submission_history(history):
              with open("submission_history.json", "w") as f:
                  json.dump(history, f, indent=4)
          
          def get_solution_code(contest_id, submission_id):
              """Get code using cloudscraper to bypass Cloudflare"""
              try:
                  url = f"https://codeforces.com/contest/{contest_id}/submission/{submission_id}"
                  # --- CAMBIO CLAVE: Usamos el scraper ---
                  # Ya no necesitamos headers manuales, cloudscraper se encarga de todo
                  response = scraper.get(url)
                  response.raise_for_status()
                  
                  content = response.text
                  start_marker = '<pre id="program-source-text"'
                  end_marker = '</pre>'
                  
                  start_idx = content.find(start_marker)
                  if start_idx == -1:
                      print(f"Could not find code block for submission {submission_id}")
                      return None
                      
                  code_start = content.find('>', start_idx) + 1
                  code_end = content.find(end_marker, code_start)
                  
                  if code_end > code_start:
                      code = content[code_start:code_end]
                      return html.unescape(code)
                  return None
              except Exception as e:
                  print(f"Error getting solution code for {submission_id}: {e}")
                  return None

          def get_file_extension(lang):
              lang = lang.lower()
              if "c++" in lang or "gcc" in lang: return "cpp"
              if "python" in lang: return "py"
              if "java" in lang: return "java"
              return "txt"
          
          def main():
              os.makedirs("submissions", exist_ok=True)
              submitted_problems = load_submission_history()
              
              print(f"Fetching submissions for {HANDLE}...")
              data = fetch_with_retry(SUBMISSION_API)
              if not data:
                  print("Failed to fetch submissions from API. Exiting.")
                  return
              
              submissions = data["result"]
              new_count = 0
              
              # Procesamos en orden cronolÃ³gico inverso para coger las mÃ¡s recientes primero
              for submission in sorted(submissions, key=lambda s: s['creationTimeSeconds'], reverse=True):
                  if submission.get("verdict") != "OK": continue
                      
                  contest_id = submission["contestId"]
                  problem_index = submission["problem"]["index"]
                  submission_id = submission["id"]
                  problem_id = f"{contest_id}_{problem_index}"
                  
                  if problem_id in submitted_problems: continue
                      
                  print(f"Found new accepted solution: {problem_id}")
                  lang = submission["programmingLanguage"]
                  extension = get_file_extension(lang)
                  
                  code = get_solution_code(contest_id, submission_id)
                  if not code:
                      print(f"Could not get code for {problem_id}, skipping.")
                      continue
                  
                  file_path = f"submissions/{problem_id}.{extension}"
                  with open(file_path, "w", encoding="utf-8") as file:
                      file.write(code)
                  
                  submitted_problems.append(problem_id)
                  new_count += 1
                  print(f"Successfully added solution for {problem_id}")
              
              save_submission_history(submitted_problems)
              print(f"Processed {new_count} new accepted solutions.")
          
          if __name__ == "__main__":
              main()
          EOF

      - name: Run submission fetcher
        run: python fetch_submissions.py
          
      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "ðŸš€ Added new Codeforces solutions"
          git push

