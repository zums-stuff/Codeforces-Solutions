name: Codeforces Auto-Commit
on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:

jobs:
  fetch-and-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
      
      - name: Pull latest changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull --rebase

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: pip install requests cloudscraper
          
      - name: Create fetch_submissions.py (DEBUG MODE)
        env:
          CF_HANDLE: "zum" # Tu usuario de Codeforces
        run: |
          sed "s/HANDLE = .*/HANDLE = \"${CF_HANDLE}\"/" > fetch_submissions.py << 'EOF'
          import requests
          import cloudscraper
          import json
          import os
          from datetime import datetime
          import time
          import html
          import sys

          HANDLE = "placeholder"
          COUNT = 10
          SUBMISSION_API = f"https://codeforces.com/api/user.status?handle={HANDLE}&from=1&count={COUNT}"
          
          scraper = cloudscraper.create_scraper() 

          def fetch_with_retry(url, max_retries=3):
              for attempt in range(max_retries):
                  try:
                      response = scraper.get(url)
                      response.raise_for_status()
                      data = response.json()
                      if data["status"] == "OK": return data
                  except Exception as e:
                      print(f"API fetch attempt {attempt+1} failed: {e}")
                      if attempt == max_retries - 1: raise
                      time.sleep(2 ** attempt)
          
          # --- INICIO DE LA MODIFICACIÓN DE DIAGNÓSTICO ---
          def get_and_print_page_content(contest_id, submission_id):
              """
              Esta es una función temporal para diagnóstico.
              No extrae el código, solo imprime el HTML de la página en los logs.
              """
              try:
                  url = f"https://codeforces.com/contest/{contest_id}/submission/{submission_id}"
                  response = scraper.get(url)
                  response.raise_for_status()
                  
                  print("\n\n--- INICIO DEL CONTENIDO HTML DE LA PÁGINA ---\n\n")
                  print(response.text)
                  print("\n\n--- FIN DEL CONTENIDO HTML DE LA PÁGINA ---\n\n")
                  
              except Exception as e:
                  print(f"Error getting page content for {submission_id}: {e}")
          # --- FIN DE LA MODIFICACIÓN DE DIAGNÓSTICO ---
          
          def main():
              print(f"Fetching submissions for {HANDLE}...")
              data = fetch_with_retry(SUBMISSION_API)
              if not data:
                  print("Failed to fetch submissions from API. Exiting.")
                  return
              
              submissions = data["result"]
              
              # Solo procesamos la primera solución aceptada que encuentre para el diagnóstico
              for submission in sorted(submissions, key=lambda s: s['creationTimeSeconds'], reverse=True):
                  if submission.get("verdict") == "OK":
                      contest_id = submission["contestId"]
                      submission_id = submission["id"]
                      problem_id = f"{contest_id}_{submission['problem']['index']}"
                      print(f"Found submission {problem_id}. Printing its page content for debugging...")
                      get_and_print_page_content(contest_id, submission_id)
                      print("Debug run finished. Exiting.")
                      sys.exit(0) # Salimos después de procesar una
              
              print("No new accepted submissions found to debug.")
          
          if __name__ == "__main__":
              main()
          EOF

      - name: Run submission fetcher (DEBUG MODE)
        run: python fetch_submissions.py

